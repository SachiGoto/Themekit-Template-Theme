{{ content_for_index }}

<h1>1.String Concatenation</h1>

{%  assign first_name = "Sachi" %}
{%  assign last_name = "Goto" %}
<!-- // capture containes everything in the capture tag //  -->
{% capture full_name %}
Full Name: {{ first_name }} {{ last_name }}
{%  endcapture %}

{{ full_name }}


<h2>2.Substrings</h2>


{%  assign youtube_video_url = "https://www.youtube.com/watch?v=PD-dx92RJtg" %}

{%  if youtube_video_url contains 'youtube.com/watch' %}

{% assign video_id = youtube_video_url |split: 'v=' %}
  {% if youtbe_vidoe_url contains '&' %}
    {%  assign video_id = video_id[1] | split : '&' | first %}
{% else %}
    {%  assign video_id = video_id[1] %}
{%  endif %}


{{ video_id }}
<iframe width="560" height="315" src="https://www.youtube.com/embed/{{ video_id }}" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>>

{% endif %}

<iframe width="560" height="315" src="https://www.youtube.com/embed/PD-dx92RJtg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<!-- Shopify liquid doesn't allow for making Objects, neither can you careate arrays of objects. 
You can however make arrays of strings and numbers as well as array of arrays using capture and split. 
Best way is to create a collection. Collection is an array with objects inside. However, there is a workaround without creating collection.  -->

<h2>How to put objects in an array in liquid??</h2>

{%  assign collection = collections['featured-collection'] %}
{% assign collection2 = collections['example-collection'] %}

{% capture products_list %}
  {%  for product in collection.products %}
    {{ product.title }} |{{ product.url }} | {{ product.description }} {{ product.featured_image.src | product_ima_url:'medium' }}
    
    {%  if forloop.last == false %} :: {% endif %}
  {%  endfor %}
  
{% endcapture %}

<h3>3. Product list</h3>
<!-- {{ products_list }} -->



{% assign products_array = products_list | split: '::' %}

<!-- {{ products_array }} -->

{% for product in products_array %}
  {%  assign product_vals = product | split:'|' %}
<!--   product title -->
  {{ product_vals[0] }}
<!--   product description -->
  {{ product_vals[2] }}
{%  endfor %}


{{ product_vals }}


<hr>
<!-- Another example -->

{%  assign itemsArray = "item1#item2" | split:'#' %}
{%  assign colorsArray = "blue#green"| split:'#' %}

{% for item in itemsArray %}
   {{ item }}
    {{ colorsArray[forloop.index0] }}
  <br>
  
  {% endfor %}

<h3> Comparison / Creating booleans</h3>
<p> This would't work because you can't pass boolean variables</p>
  {%  assign true_or_false = ("Hello" == "Hello") %}

  {%  if true_or_false %}
    hello does equal hello!
  {% else %}
    hello doesn't equl hello?
  {%  endif %}

<p>This works</p>
   {%  assign true_or_false = false %}

   {% if "Hello" == "Hello" %}
{%  assign true_or_false = true %}
     {%  endif %}

       {%  if true_or_false %}
    hello does equal hello!
  {% else %}
    hello doesn't equl hello?
  {%  endif %}

<hr>

  <h3> 4. Order of operations </h3
<!-- In liquid, each value will be evaluated from left to right. it ignores order of operations  -->

{% assign average_price = 50 | plus:20 | plus:30 | divided_by:3 %}
{% assign cost =8 | times:2 | plus:20 | minus:5|times:2 %}

{{ average_price }}
{{ cost }}

<h4>How to write equation following order of operations?</h4>

<!-- // divide calculations in multiple lines -->

{% assign cost_of_shirts =8 | times: 2 %}
{% assign cost_of_shorts = 20 | minus:5 | times: 2 %}
{% assign cost = cost_of_shirts | plus:cost_of_shorts %}

{{ cost }}



<h3>5. empty drops</h3>

{%  assign page = pages["does-not-exist"] %}

{{ page }}








  

  

  


